// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;

public class ItemData
{
	[System.Serializable]
	public class Info
	{
		public int ID;
		public string Name_Eng;
		public string Name_Kor;
		public E_MaterialType Material_Type;
		public E_UseTool Use_Tool;
		public bool Craft;
		public int Stack;
		public int Craft_Place;
		public SourceInfo[] SourceArr;
		public int Dur;
		public int Dur_Reduction;
		public int Atk_Variation;
		public int Def_Variation;
		public int Hydration_Variation;
		public int Hunger_Variation;
		public int Fatigue_Varioation;
		public bool Flu_Removal;
		public bool Bromatotoxism_Removal;
		public int Hp_Variation;
		public bool Bromatotoxism_Chk;
		public int Sound;
	}

	List<Info> rowList = new List<Info>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Info> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Info row = new Info();
			row.ID = int.Parse(grid[i][0]);
			row.Name_Eng = grid[i][1];
			row.Name_Kor = grid[i][2];
			row.Material_Type = (E_MaterialType)(int.Parse(grid[i][3]));
			row.Use_Tool = (E_UseTool)(int.Parse(grid[i][4]));
			row.Craft = Convert.ToBoolean(int.Parse(grid[i][5]));
			row.Stack = int.Parse(grid[i][6]);
			row.Craft_Place = int.Parse(grid[i][7]);

			row.SourceArr = new SourceInfo[4];
			row.SourceArr[0].ItemID = int.Parse(grid[i][8]);
			row.SourceArr[0].count = int.Parse(grid[i][9]);

			row.SourceArr[1].ItemID = int.Parse(grid[i][10]);
			row.SourceArr[1].count = int.Parse(grid[i][11]);

			row.SourceArr[2].ItemID = int.Parse(grid[i][12]);
			row.SourceArr[2].count = int.Parse(grid[i][13]);

			row.SourceArr[3].ItemID = int.Parse(grid[i][14]);
			row.SourceArr[3].count = int.Parse(grid[i][15]);

			row.Dur = int.Parse(grid[i][16]);
			row.Dur_Reduction = int.Parse(grid[i][17]);
			row.Atk_Variation = int.Parse(grid[i][18]);
			row.Def_Variation = int.Parse(grid[i][19]);
			row.Hydration_Variation = int.Parse(grid[i][20]);
			row.Hunger_Variation = int.Parse(grid[i][21]);
			row.Fatigue_Varioation = int.Parse(grid[i][22]);
			row.Flu_Removal = Convert.ToBoolean(int.Parse(grid[i][23]));
			row.Bromatotoxism_Removal = Convert.ToBoolean(int.Parse(grid[i][24]));
			row.Hp_Variation = int.Parse(grid[i][25]);
			row.Bromatotoxism_Chk = Convert.ToBoolean(int.Parse(grid[i][26]));

			row.Sound = int.Parse(grid[i][27]);

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Info GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Info Find_ID(int find)
	{
		return rowList.Find(x => x.ID == find);
	}
	public List<Info> FindAll_ID(int find)
	{
		return rowList.FindAll(x => x.ID == find);
	}
	public Info Find_Name_Eng(string find)
	{
		return rowList.Find(x => x.Name_Eng == find);
	}
	public List<Info> FindAll_Name_Eng(string find)
	{
		return rowList.FindAll(x => x.Name_Eng == find);
	}
	public Info Find_Name_Kor(string find)
	{
		return rowList.Find(x => x.Name_Kor == find);
	}
	public List<Info> FindAll_Name_Kor(string find)
	{
		return rowList.FindAll(x => x.Name_Kor == find);
	}
	public Info Find_Material_Type(E_MaterialType find)
	{
		return rowList.Find(x => x.Material_Type == find);
	}
	public List<Info> FindAll_Material_Type(E_MaterialType find)
	{
		return rowList.FindAll(x => x.Material_Type == find);
	}

	public Info Find_Use_Tool(E_UseTool find)
	{
		return rowList.Find(x => x.Use_Tool == find);
	}
	public List<Info> FindAll_Use_Tool(E_UseTool find)
	{
		return rowList.FindAll(x => x.Use_Tool == find);
	}

	public Info Find_Craft(bool find)
	{
		return rowList.Find(x => x.Craft == find);
	}
	public List<Info> FindAll_Craft(bool find)
	{
		return rowList.FindAll(x => x.Craft == find);
	}
	public Info Find_Stack(int find)
	{
		return rowList.Find(x => x.Stack == find);
	}
	public List<Info> FindAll_Stack(int find)
	{
		return rowList.FindAll(x => x.Stack == find);
	}
	public Info Find_Craft_Place(int find)
	{
		return rowList.Find(x => x.Craft_Place == find);
	}
	public List<Info> FindAll_Craft_Place(int find)
	{
		return rowList.FindAll(x => x.Craft_Place == find);
	}
	public Info Find_Dur(int find)
	{
		return rowList.Find(x => x.Dur == find);
	}
	public List<Info> FindAll_Dur(int find)
	{
		return rowList.FindAll(x => x.Dur == find);
	}
	public Info Find_Dur_Interact(int find)
	{
		return rowList.Find(x => x.Dur_Reduction == find);
	}
	public List<Info> FindAll_Dur_Interact(int find)
	{
		return rowList.FindAll(x => x.Dur_Reduction == find);
	}
	public Info Find_Atk_Variation(int find)
	{
		return rowList.Find(x => x.Atk_Variation == find);
	}
	public List<Info> FindAll_Atk_Variation(int find)
	{
		return rowList.FindAll(x => x.Atk_Variation == find);
	}
	public Info Find_Def_Variation(int find)
	{
		return rowList.Find(x => x.Def_Variation == find);
	}
	public List<Info> FindAll_Def_Variation(int find)
	{
		return rowList.FindAll(x => x.Def_Variation == find);
	}
	public Info Find_Hydration_Variation(int find)
	{
		return rowList.Find(x => x.Hydration_Variation == find);
	}
	public List<Info> FindAll_Hydration_Variation(int find)
	{
		return rowList.FindAll(x => x.Hydration_Variation == find);
	}
	public Info Find_Hunger_Variation(int find)
	{
		return rowList.Find(x => x.Hunger_Variation == find);
	}
	public List<Info> FindAll_Hunger_Variation(int find)
	{
		return rowList.FindAll(x => x.Hunger_Variation == find);
	}
	public Info Find_Fatigue_Varioation(int find)
	{
		return rowList.Find(x => x.Fatigue_Varioation == find);
	}
	public List<Info> FindAll_Fatigue_Varioation(int find)
	{
		return rowList.FindAll(x => x.Fatigue_Varioation == find);
	}
	public Info Find_Flu_Removal(bool find)
	{
		return rowList.Find(x => x.Flu_Removal == find);
	}
	public List<Info> FindAll_Flu_Removal(bool find)
	{
		return rowList.FindAll(x => x.Flu_Removal == find);
	}
	public Info Find_Bromatotoxism_Removal(bool find)
	{
		return rowList.Find(x => x.Bromatotoxism_Removal == find);
	}
	public List<Info> FindAll_Bromatotoxism_Removal(bool find)
	{
		return rowList.FindAll(x => x.Bromatotoxism_Removal == find);
	}
	public Info Find_Hp_Variation(int find)
	{
		return rowList.Find(x => x.Hp_Variation == find);
	}
	public List<Info> FindAll_Hp_Variation(int find)
	{
		return rowList.FindAll(x => x.Hp_Variation == find);
	}

}